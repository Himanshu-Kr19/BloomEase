import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.net.URI;              
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.font.TextAttribute;

public class Period_Problems_GUI {

    private static final String DB_URL = "jdbc:mysql://mydb.cz0kykm0gosc.us-east-1.rds.amazonaws.com:3306/nog";
    private static final String DB_USER = "admin";
    private static final String DB_PASSWORD = "123456789";

    private static List<CycleData> cycleDataList = new ArrayList<>();

    public static void main(String[] args) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        // Display login page first
        SwingUtilities.invokeLater(LoginPage::createAndShowGUI);
    }

    static class LoginPage {
        private static JFrame frame;
        private static JTextField usernameField;
        private static JPasswordField passwordField;

        static void createAndShowGUI() {
            frame = new JFrame("Login");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(300, 200);

            JPanel panel = new JPanel();
            panel.setLayout(new GridLayout(3, 2));

            JLabel usernameLabel = new JLabel("Username/Phone:");
            panel.add(usernameLabel);

            usernameField = new JTextField();
            panel.add(usernameField);

            JLabel passwordLabel = new JLabel("Password:");
            panel.add(passwordLabel);

            passwordField = new JPasswordField();
            panel.add(passwordField);

            JButton loginButton = new JButton("Login");
            loginButton.addActionListener(e -> login());
            panel.add(loginButton);

            JButton registerButton = new JButton("Register");
            registerButton.addActionListener(e -> {
                frame.dispose();
                RegisterPage.createAndShowGUI();
            });
            panel.add(registerButton);

            frame.add(panel);
            frame.setVisible(true);
        }

        private static void login() {
            String usernameOrPhone = usernameField.getText();
            String password = String.valueOf(passwordField.getPassword());
            
            if (authenticateUser(usernameOrPhone, password)) {
                JOptionPane.showMessageDialog(frame, "Login successful");
                frame.dispose();
                displayMainGUI();
            } else {
                JOptionPane.showMessageDialog(frame, "Invalid username/phone or password");
            }        
        }

        private static boolean authenticateUser(String usernameOrPhone, String password) {
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                String sql = "SELECT * FROM users WHERE (username = ? OR phone = ?) AND password = ?";
                try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
                    preparedStatement.setString(1, usernameOrPhone);
                    preparedStatement.setString(2, usernameOrPhone);
                    preparedStatement.setString(3, password);
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        return resultSet.next();
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return false;
        }
    }

    static class RegisterPage {
        private static JFrame frame;
        private static JTextField usernameField;
        private static JTextField phoneField;
        private static JPasswordField passwordField;
        private static JPasswordField confirmPasswordField;

        static void createAndShowGUI() {
            frame = new JFrame("Register");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(300, 250);

            JPanel panel = new JPanel();
            panel.setLayout(new GridLayout(5, 2));

            JLabel usernameLabel = new JLabel("Username:");
            panel.add(usernameLabel);

            usernameField = new JTextField();
            panel.add(usernameField);

            JLabel phoneLabel = new JLabel("Phone:");
            panel.add(phoneLabel);

            phoneField = new JTextField();
            panel.add(phoneField);

            JLabel passwordLabel = new JLabel("Password:");
            panel.add(passwordLabel);

            passwordField = new JPasswordField();
            panel.add(passwordField);

            JLabel confirmPasswordLabel = new JLabel("Confirm Password:");
            panel.add(confirmPasswordLabel);

            confirmPasswordField = new JPasswordField();
            panel.add(confirmPasswordField);

            JButton registerButton = new JButton("Register");
            registerButton.addActionListener(e -> register());
            panel.add(registerButton);

            JButton backButton = new JButton("Back to Login");
            backButton.addActionListener(e -> {
                frame.dispose();
                LoginPage.createAndShowGUI();
            });
            panel.add(backButton);

            frame.add(panel);
            frame.setVisible(true);
        }

        private static void register() {
            String username = usernameField.getText();
            String phone = phoneField.getText();
            String password = String.valueOf(passwordField.getPassword());
            String confirmPassword = String.valueOf(confirmPasswordField.getPassword());

            if (!password.equals(confirmPassword)) {
                JOptionPane.showMessageDialog(frame, "Passwords do not match");
                return;
            }

            if (!validateRegistration(username, phone, password)) {
                return;
            }

            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                String sql = "INSERT INTO users (username, phone, password) VALUES (?, ?, ?)";
                try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
                    preparedStatement.setString(1, username);
                    preparedStatement.setString(2, phone);
                    preparedStatement.setString(3, password);
                    preparedStatement.executeUpdate();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            JOptionPane.showMessageDialog(frame, "Account created successfully");
            frame.dispose();
            displayMainGUI();
        }

        private static boolean validateRegistration(String username, String phone, String password) {
            if (!phone.matches("\\d{10}")) {
                JOptionPane.showMessageDialog(frame, "Phone number must be 10 digits");
                return false;
            }

            if (!username.matches("[a-zA-Z0-9]+")) {
                JOptionPane.showMessageDialog(frame, "Username must contain only alphanumeric characters");
                return false;
            }

            if (!password.matches("[a-zA-Z0-9]+")) {
                JOptionPane.showMessageDialog(frame, "Password must contain only alphanumeric characters");
                return false;
            }

            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                String sql = "SELECT * FROM users WHERE username = ? OR phone = ?";
                try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
                    preparedStatement.setString(1, username);
                    preparedStatement.setString(2, phone);
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            JOptionPane.showMessageDialog(frame, "Username or phone number already exists");
                            return false;
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            return true;
        }
    }

    private static void displayMainGUI() {
        // Your existing main functionality here
        
        // Load the MySQL JDBC driver
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            // Handle driver loading error
        }

        JFrame frame = new JFrame("BloomEase");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0, 1)); // Single column layout

        // Create a JLabel for the title with HTML formatting
        JLabel titleLabel = new JLabel("<html><div style='text-align: center; font-size: 20px; font-weight: bold;'>Welcome to \"BloomEase\"</div></html>");
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        panel.add(titleLabel);

        // Create a JLabel for the additional text with HTML formatting to make it bold
        JLabel additionalTextLabel = new JLabel("<html><div style='text-align: center; font-size: 14px; font-weight: bold;'>( Nurturing Women's Cycle )</div></html>");
        additionalTextLabel.setHorizontalAlignment(SwingConstants.CENTER);
        panel.add(additionalTextLabel);

        JButton[] buttons = new JButton[6];
        String[] buttonLabels = {
                "Period Problems",
                "Contact a Doctor",
                "Track Menstrual Cycle",
                "Set Custom Reminders",
                "View Menstrual Cycle Data",
                "View Custom Reminders"
        };

        for (int i = 0; i < buttons.length; i++) {
            buttons[i] = new JButton(buttonLabels[i]);
            panel.add(buttons[i]);
        }

        for (int i = 0; i < buttons.length; i++) {
            final int index = i;
            buttons[i].addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    handleButtonClick(index);
                }
            });
        }

        frame.add(panel);
        frame.setVisible(true);
    }


    private static void handleButtonClick(int choice) {
        // Implement functionality for button clicks
        switch (choice) {
            case 0:
                // Code for "Period Problems"
                displayPeriodProblems();
                break;
            case 1:
                // Code for "Contact a Doctor"
                displayDoctorContacts();
                break;
            case 2:
                // Code for "Track Menstrual Cycle"
                trackMenstrualCycle();
                break;
            case 3:
                // Code for "Set Custom Reminders"
                setCustomReminders();
                break;
            case 4:
                // Code for "View Menstrual Cycle Data"
                viewMenstrualCycleData();
                break;
            case 5:
                // Code for "View Custom Reminders"
                viewCustomReminders();
                break;
        }
    }

    // Other methods and classes here...

    private static void displayPeriodProblems() {
        // Create a new JFrame for period problems and remedies
        JFrame problemsFrame = new JFrame("Period Problems");
        problemsFrame.setSize(400, 300);
        problemsFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close only this frame
    
        JPanel problemsPanel = new JPanel();
        problemsPanel.setLayout(new GridLayout(0, 1)); // Single column layout
    
        // Create a JLabel for the title with HTML formatting
        JLabel problemsTitleLabel = new JLabel("<html><div style='text-align: center; font-size: 20px; font-weight: bold;'>Period Problems</div></html>");
        problemsTitleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        problemsPanel.add(problemsTitleLabel);
    
        // Fetch problems from the database
        List<String> problems = getPeriodProblemsFromDatabase();
    
        for (String problem : problems) {
            JButton problemButton = new JButton(problem);
            problemButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    displayRemedy(problem);
                }
            });
            problemsPanel.add(problemButton);
        }
    
        problemsFrame.add(problemsPanel);
        problemsFrame.setVisible(true);
    }
    
    private static void displayRemedy(String problem) {
        // Fetch remedy for the selected problem from the database
        String remedy = getRemedyFromDatabase(problem);
        JOptionPane.showMessageDialog(null, remedy);
    }

    // Function to retrieve period problems from the database
    private static List<String> getPeriodProblemsFromDatabase() {
        List<String> problems = new ArrayList<>();
        String sql = "SELECT Problems FROM PeriodsProblems";
    
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = conn.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {
    
            while (resultSet.next()) {
                String problem = resultSet.getString("Problems");
                problems.add(problem);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return problems;
    }

    // Function to retrieve remedy from the database based on the selected problem
    private static String getRemedyFromDatabase(String problem) {
        String remedy = "";
        String sql = "SELECT Remedy FROM PeriodsProblems WHERE Problems = ?";
    
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
    
            preparedStatement.setString(1, problem);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    remedy = resultSet.getString("Remedy");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return remedy;
    }
    
    private static void displayDoctorContacts() {
        JFrame doctorFrame = new JFrame("Contact a Doctor");
        doctorFrame.setSize(400, 300);
        doctorFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    
        JPanel doctorPanel = new JPanel();
        doctorPanel.setLayout(new GridLayout(0, 1));
    
        JLabel doctorTitleLabel = new JLabel("<html><div style='text-align: center; font-size: 20px; font-weight: bold;'>Contact a Doctor</div></html>");
        doctorTitleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        doctorPanel.add(doctorTitleLabel);
    
        // Fetch doctors' data from the database
        List<Doctor> doctors = getDoctorContactsFromDatabase();
    
        for (Doctor doctor : doctors) {
            JLabel doctorLabel = new JLabel(doctor.getName() + " - Phone: " + doctor.getPhone());
            doctorPanel.add(doctorLabel);
        }
    
        JButton bookAppointmentButton = new JButton("Book an appointment");
        bookAppointmentButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    URI uri = new URI("https://www.lybrate.com/chennai/doctors-for-menstrual-problems-treatment");
                    Desktop.getDesktop().browse(uri);
                } catch (IOException | URISyntaxException ex) {
                    ex.printStackTrace();
                }
            }
        });
    
        doctorPanel.add(bookAppointmentButton);
        doctorFrame.add(doctorPanel);
        doctorFrame.setVisible(true);
    }

    // Function to retrieve doctor contacts from the database
    private static List<Doctor> getDoctorContactsFromDatabase() {
        List<Doctor> doctors = new ArrayList<>();
        String sql = "SELECT Dr_name, Phone FROM Doctors";

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = conn.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            while (resultSet.next()) {
                String name = resultSet.getString("Dr_name");
                String phone = resultSet.getString("Phone");
                Doctor doctor = new Doctor(name, phone);
                doctors.add(doctor);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return doctors;
    }

    private static void trackMenstrualCycle() {
        JFrame trackCycleFrame = new JFrame("Track Menstrual Cycle");
        trackCycleFrame.setSize(400, 300);
        trackCycleFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close only this frame

        JPanel trackCyclePanel = new JPanel();
        trackCyclePanel.setLayout(new GridLayout(0, 1)); // Single column layout

        // Create a JLabel for the title with HTML formatting
        JLabel trackCycleTitleLabel = new JLabel("<html><div style='text-align: center; font-size: 20px; font-weight: bold;'>Track Menstrual Cycle</div></html>");
        trackCycleTitleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        trackCyclePanel.add(trackCycleTitleLabel);

        JTextField cycleLengthField = new JTextField(10);
        JTextField startDateField = new JTextField(10);
        JButton doneButton = new JButton("Done");

        trackCyclePanel.add(new JLabel("Cycle Length (in days):"));
        trackCyclePanel.add(cycleLengthField);
        trackCyclePanel.add(new JLabel("Start Date (YYYY-MM-DD):"));
        trackCyclePanel.add(startDateField);
        trackCyclePanel.add(doneButton);

        doneButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Get data from input fields
                String cycleLengthStr = cycleLengthField.getText();
                String startDate = startDateField.getText();

                // Validate input and save data
                if (isValidInput(cycleLengthStr, startDate)) {
                    int cycleLength = Integer.parseInt(cycleLengthStr);
                    LocalDate currentDate = LocalDate.now();
                    CycleData cycleData = new CycleData(cycleLength, startDate, currentDate);
                    cycleDataList.add(cycleData);
                    saveCycleDataToDatabase(cycleData);
                    JOptionPane.showMessageDialog(null, "Cycle data recorded.");
                    trackCycleFrame.dispose(); // Close the input frame
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please enter valid data.");
                }
            }
        });

        trackCycleFrame.add(trackCyclePanel);
        trackCycleFrame.setVisible(true);
    }

    private static boolean isValidInput(String cycleLengthStr, String startDate) {
        try {
            int cycleLength = Integer.parseInt(cycleLengthStr);
            LocalDate.parse(startDate); // Validate start date format
            return cycleLength > 0;
        } catch (NumberFormatException | NullPointerException | DateTimeException e) {
            return false;
        }
    }

    private static void saveCycleDataToDatabase(CycleData cycleData) {
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
        String sql = "INSERT INTO menstrual_cycle_data (cycle_length, start_date, cycle_date) VALUES (?, ?, ?)";
        try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
            preparedStatement.setInt(1, cycleData.cycleLength);
            preparedStatement.setString(2, cycleData.startDate);
            preparedStatement.setString(3, cycleData.currentDate.toString());
            preparedStatement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle database connection or query errors
    }
}


private static List<CycleData> readCycleDataFromDatabase() {
    List<CycleData> cycleDataList = new ArrayList<>();
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
        String sql = "SELECT cycle_length, start_date, cycle_date FROM menstrual_cycle_data";
        try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    int cycleLength = resultSet.getInt("cycle_length");
                    String startDate = resultSet.getString("start_date");
                    LocalDate currentDate = LocalDate.parse(resultSet.getString("cycle_date"));
                    CycleData cycleData = new CycleData(cycleLength, startDate, currentDate);
                    cycleDataList.add(cycleData);
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle database connection or query errors
    }
    return cycleDataList;
}


private static void setCustomReminders() {

    JFrame remindersFrame = new JFrame("Reminders");
    remindersFrame.setSize(400, 300);
    remindersFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close only this frame

    JPanel remindersPanel = new JPanel();
    remindersPanel.setLayout(new GridLayout(0, 1)); // Single column layout

    // Create a JLabel for the title with HTML formatting
    JLabel remindersTitleLabel = new JLabel("<html><div style='text-align: center; font-size: 20px; font-weight: bold;'>Reminders</div></html>");
    remindersTitleLabel.setHorizontalAlignment(SwingConstants.CENTER);
    remindersPanel.add(remindersTitleLabel);

    JTextField reminderText = new JTextField(20);
    JButton addReminderButton = new JButton("Add Reminder");
    JButton doneButton = new JButton("Done");

    remindersPanel.add(new JLabel("Reminder Text:"));
    remindersPanel.add(reminderText);
    remindersPanel.add(addReminderButton);
    remindersPanel.add(doneButton);

    addReminderButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            String reminder = reminderText.getText();
            if (!reminder.isEmpty()) {
                // Save the reminder to the file
                saveReminderToDatabase(reminder);
                reminderText.setText("");
            }
        }
    });

    doneButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            remindersFrame.dispose(); // Close the input frame
        }
    });

    remindersFrame.add(remindersPanel);
    remindersFrame.setVisible(true);
}

private static void saveReminderToDatabase(String reminder) {
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
        String sql = "INSERT INTO custom_reminders (reminder_text) VALUES (?)";
        try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
            preparedStatement.setString(1, reminder);
            preparedStatement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle database connection or query errors
    }
}


private static void viewMenstrualCycleData() {
    // Create a new JFrame to display menstrual cycle data
    JFrame dataFrame = new JFrame("View Menstrual Cycle Data");
    dataFrame.setSize(400, 300);
    dataFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close only this frame

    JPanel dataPanel = new JPanel();
    dataPanel.setLayout(new GridLayout(0, 1)); // Single column layout

    // Create a JLabel for the title with HTML formatting
    JLabel dataTitleLabel = new JLabel("<html><div style='text-align: center; font-size: 20px; font-weight: bold;'>Menstrual Cycle Data</div></html>");
    dataTitleLabel.setHorizontalAlignment(SwingConstants.CENTER);
    dataPanel.add(dataTitleLabel);

    JTextArea cycleDataTextArea = new JTextArea(10, 30);
    cycleDataTextArea.setEditable(false); // Make the text area read-only

    // Load menstrual cycle data and display it in the text area
    List<CycleData> cycleDataList = readCycleDataFromDatabase();
    for (CycleData cycleData : cycleDataList) {
        cycleDataTextArea.append("Cycle Length: " + cycleData.cycleLength + " days\n");
        cycleDataTextArea.append("Start Date: " + cycleData.startDate + "\n");
        cycleDataTextArea.append("Current Date: " + cycleData.currentDate + "\n");
        cycleDataTextArea.append("\n");
    }

    JScrollPane scrollPane = new JScrollPane(cycleDataTextArea);
    dataPanel.add(scrollPane);

    dataFrame.add(dataPanel);
    dataFrame.setVisible(true);
}

private static void viewCustomReminders() {
    JFrame remindersFrame = new JFrame("View Custom Reminders");
    remindersFrame.setSize(400, 400);
    remindersFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    JPanel remindersPanel = new JPanel();
    remindersPanel.setLayout(new BoxLayout(remindersPanel, BoxLayout.Y_AXIS));

    JLabel remindersTitleLabel = new JLabel("<html><div style='text-align: center; font-size: 20px; font-weight: bold;'>Custom Reminders</div></html>");
    remindersTitleLabel.setHorizontalAlignment(SwingConstants.CENTER);
    remindersPanel.add(remindersTitleLabel);

    // Load your custom reminders from the text file or data structure here
    List<String> customReminders = loadCustomRemindersFromDatabase();


    List<JCheckBox> checkBoxes = new ArrayList<>();

    for (String reminder : customReminders) {
        JCheckBox checkBox = new JCheckBox(reminder);
        checkBox.setFont(new Font("Arial", Font.PLAIN, 14));
        checkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (checkBox.isSelected()) {
                    Font font = checkBox.getFont();
                    Map<TextAttribute, Object> attributes = new HashMap<TextAttribute, Object>();
                    attributes.put(TextAttribute.STRIKETHROUGH, TextAttribute.STRIKETHROUGH_ON);
                    checkBox.setFont(font.deriveFont(attributes));
                } else {
                    Font font = checkBox.getFont();
                    Map<TextAttribute, Object> attributes = new HashMap<TextAttribute, Object>();
                    attributes.put(TextAttribute.STRIKETHROUGH, -1);
                    checkBox.setFont(font.deriveFont(attributes));
                }
            }
        });

        checkBoxes.add(checkBox);
        remindersPanel.add(checkBox);

        remindersPanel.add(Box.createVerticalStrut(5));
    }

    JScrollPane scrollPane = new JScrollPane(remindersPanel);
    remindersFrame.add(scrollPane);
    remindersFrame.setVisible(true);
}

private static List<String> loadCustomRemindersFromDatabase() {
    List<String> reminders = new ArrayList<>();
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
        String sql = "SELECT reminder_text FROM custom_reminders";
        try (PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    String reminder = resultSet.getString("reminder_text");
                    reminders.add(reminder);
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle database connection or query errors
    }
    return reminders;
}

}

class CycleData {
    int cycleLength;
    String startDate;
    LocalDate currentDate;

    public CycleData(int cycleLength, String startDate, LocalDate currentDate) {
        this.cycleLength = cycleLength;
        this.startDate = startDate;
        this.currentDate = currentDate;
    }
}

class Doctor {
    private String name;
    private String phone;

    public Doctor(String name, String phone) {
        this.name = name;
        this.phone = phone;
    }

    public String getName() {
        return name;
    }

    public String getPhone() {
        return phone;
    }
}
